# Generated by Django 4.2 on 2024-03-09 16:38

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Действие")),
            ],
            options={
                "verbose_name": "Действие в рамках амбассадорства",
                "verbose_name_plural": "Действия в рамках амбассадорства",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Ambassador",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fio",
                    models.CharField(
                        max_length=100, verbose_name="Фамилия Имя Отчество"
                    ),
                ),
                (
                    "sex",
                    models.CharField(
                        choices=[("М", "Мужчина"), ("Ж", "Женщина")],
                        max_length=1,
                        verbose_name="Пол амбассадора",
                    ),
                ),
                (
                    "course",
                    models.CharField(
                        choices=[
                            ("analyst", "Аналитик данных"),
                            ("data_scientist", "Специалист по Data Science"),
                            ("python_dev", "Python-разработчик"),
                            ("web_dev", "Веб-разработчик"),
                            ("qa_engineer", "Инженер по тестированию(QA)"),
                            ("ux_ui_designer", "UX/UI-дизайнер"),
                            ("marketing", "Маркетинг"),
                            ("graphic_designer", "Графический дизайнер"),
                            ("middle_python", "Middle Python"),
                            ("c_plus_plus", "C++"),
                            ("data_engineer", "Инженер данных"),
                            ("it_recruiter", "IT-рекрутер"),
                            ("management", "Управление"),
                            ("english", "Английский"),
                            ("critical_thinking", "Критическое мышление"),
                            ("business_communication", "Рабочая коммуникация"),
                            ("developer_algorithms", "Алгоритмы для разработчиков"),
                            ("product_design", "Продуктовый дизайн"),
                            (
                                "sql_data_analytics",
                                "SQL для работы с данными и аналитики",
                            ),
                            ("java_dev", "Java-разработчик"),
                            ("commercial_illustrator", "Коммерческий иллюстратор"),
                            ("fullstack_dev", "Фулстек разработчик"),
                            ("advanced_go_dev", "Продвинутый GO-разработчик"),
                            ("devops", "DevOps для эксплуатации и разработки"),
                            ("ios_dev", "IOS-разработчик"),
                            ("business_analyst", "Бизнес-аналитик"),
                            (
                                "product_manager_exp",
                                "Продакт-менеджер для специалистов с опытом",
                            ),
                            ("android_dev", "Андроид-разработчик"),
                            ("project_manager", "Менеджер проектов"),
                        ],
                        max_length=100,
                        verbose_name="Программа обучения",
                    ),
                ),
                ("country", models.CharField(max_length=100, verbose_name="Страна")),
                ("city", models.CharField(max_length=100, verbose_name="Город")),
                (
                    "address",
                    models.CharField(max_length=100, verbose_name="Адрес проживания"),
                ),
                (
                    "postal_code",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Почтовый индекс должен состоять из 6 цифр",
                                regex="^\\d{6}$",
                            )
                        ],
                        verbose_name="Почтовый индекс",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="Электронная почта"),
                ),
                (
                    "phone_number",
                    models.CharField(max_length=20, verbose_name="Номер телефона"),
                ),
                (
                    "telegram",
                    models.CharField(
                        max_length=32,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Telegram ID должен начинаться с @ и содержать от 5 до 32 символов: буквы, цифры и символ _",
                                regex="^@[a-zA-Z0-9_]{5,32}$",
                            )
                        ],
                        verbose_name="Телеграм",
                    ),
                ),
                (
                    "education",
                    models.CharField(max_length=100, verbose_name="Образование"),
                ),
                (
                    "job",
                    models.CharField(max_length=100, verbose_name="Текущая работа"),
                ),
                (
                    "goal",
                    models.CharField(max_length=255, verbose_name="Цель в Практикуме"),
                ),
                (
                    "blog_link",
                    models.URLField(
                        blank=True, null=True, verbose_name="Ссылка на блог"
                    ),
                ),
                (
                    "clothing_size",
                    models.CharField(
                        choices=[
                            ("xs", "XS"),
                            ("s", "S"),
                            ("m", "M"),
                            ("l", "L"),
                            ("xl", "XL"),
                        ],
                        max_length=2,
                        verbose_name="Размер одежды",
                    ),
                ),
                (
                    "foot_size",
                    models.PositiveSmallIntegerField(verbose_name="Размер ноги"),
                ),
                (
                    "comment",
                    models.TextField(blank=True, null=True, verbose_name="Комментарий"),
                ),
                (
                    "registration_date",
                    models.DateField(
                        auto_now_add=True,
                        db_index=True,
                        verbose_name="Дата регистрации",
                    ),
                ),
                (
                    "promocode",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="Промокод"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Активный"),
                            ("paused", "На паузе"),
                            ("left", "Ушёл"),
                            ("pending", "Уточняется"),
                        ],
                        default="active",
                        max_length=50,
                        verbose_name="Статус амбассадора",
                    ),
                ),
                (
                    "guide_one",
                    models.BooleanField(default=False, verbose_name="Гайд 1"),
                ),
                (
                    "guide_two",
                    models.BooleanField(default=False, verbose_name="Гайд 2"),
                ),
                (
                    "onboarding",
                    models.BooleanField(default=False, verbose_name="Онбординг"),
                ),
                (
                    "viewed",
                    models.BooleanField(
                        default=False, verbose_name="Просмотрено/не просмотрено"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлено"),
                ),
            ],
            options={
                "verbose_name": "Амбассадор",
                "verbose_name_plural": "Амбассадоры",
            },
        ),
        migrations.CreateModel(
            name="Merch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("merch_type", models.CharField(max_length=100, verbose_name="Мерч")),
                (
                    "cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Стоимость"
                    ),
                ),
            ],
            options={
                "verbose_name": "Мерч",
                "verbose_name_plural": "Мерчи",
                "ordering": ["merch_type"],
            },
        ),
        migrations.CreateModel(
            name="MerchOnShipping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="Укажите количество мерча"
                            )
                        ],
                        verbose_name="Количество",
                    ),
                ),
                ("size", models.CharField(max_length=100, verbose_name="Размер мерча")),
                (
                    "merch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="merches_on_shipping",
                        to="ambassadors.merch",
                        verbose_name="Мерч",
                    ),
                ),
            ],
            options={
                "verbose_name": "Мерч в отправке",
                "verbose_name_plural": "Мерч в отправке",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(verbose_name="Текст уведомления")),
                (
                    "created",
                    models.DateField(
                        auto_now_add=True, db_index=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "viewed",
                    models.BooleanField(
                        default=False, verbose_name="Просмотрено/не просмотрено"
                    ),
                ),
            ],
            options={
                "verbose_name": "Уведомление",
                "verbose_name_plural": "Уведомления",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Название площадки"),
                ),
            ],
            options={
                "verbose_name": "Площадка",
                "verbose_name_plural": "Площадки",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MerchShipment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("curator", models.CharField(max_length=100, verbose_name="Куратор")),
                (
                    "date",
                    models.DateField(
                        auto_now_add=True, db_index=True, verbose_name="Дата отправки"
                    ),
                ),
                (
                    "comment",
                    models.TextField(blank=True, null=True, verbose_name="Комментарий"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("unprocessed", "Необработанные"),
                            ("processed", "Сформированные"),
                            ("transferred", "Передано логистам"),
                        ],
                        default="unprocessed",
                        max_length=50,
                        verbose_name="Статус отправки",
                    ),
                ),
                ("country", models.CharField(max_length=100, verbose_name="Страна")),
                ("city", models.CharField(max_length=100, verbose_name="Город")),
                (
                    "address",
                    models.CharField(max_length=100, verbose_name="Адрес проживания"),
                ),
                (
                    "postal_code",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Почтовый индекс должен состоять из 6 цифр",
                                regex="^\\d{6}$",
                            )
                        ],
                        verbose_name="Почтовый индекс",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(max_length=20, verbose_name="Номер телефона"),
                ),
                (
                    "ambassador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="merch_shipments",
                        to="ambassadors.ambassador",
                        verbose_name="ID амбассадора",
                    ),
                ),
                (
                    "merches",
                    models.ManyToManyField(
                        related_name="merch_shipments",
                        through="ambassadors.MerchOnShipping",
                        to="ambassadors.merch",
                        verbose_name="Амбассадорские действия",
                    ),
                ),
            ],
            options={
                "verbose_name": "Отправка мерча",
                "verbose_name_plural": "Отправки мерча",
                "ordering": ["-date"],
            },
        ),
        migrations.AddField(
            model_name="merchonshipping",
            name="shipping",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="merches_on_shipping",
                to="ambassadors.merchshipment",
                verbose_name="ID отправки",
            ),
        ),
        migrations.CreateModel(
            name="Content",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("link", models.URLField(null=True, verbose_name="Ссылка на контент")),
                (
                    "created",
                    models.DateField(auto_now_add=True, verbose_name="Дата добавления"),
                ),
                (
                    "guide_followed",
                    models.BooleanField(default=False, verbose_name="По гайду да/нет"),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлено"),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="ambassadors/content/files/",
                        verbose_name="Файл/Картинка контента",
                    ),
                ),
                (
                    "viewed",
                    models.BooleanField(
                        default=False, verbose_name="Просмотрено/не просмотрено"
                    ),
                ),
                (
                    "ambassador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content",
                        to="ambassadors.ambassador",
                        verbose_name="Амбассадор",
                    ),
                ),
                (
                    "venue",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ambassadors.venue",
                        verbose_name="Площадка",
                    ),
                ),
            ],
            options={
                "verbose_name": "Контент амбассадора",
                "verbose_name_plural": "Контент амбассадора",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="AmbassadorActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ambassador_activities",
                        to="ambassadors.activity",
                        verbose_name="ID действия",
                    ),
                ),
                (
                    "ambassador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ambassador_activities",
                        to="ambassadors.ambassador",
                        verbose_name="ID амбассадора",
                    ),
                ),
            ],
            options={
                "verbose_name": "Амбассадор-Действие",
                "verbose_name_plural": "Амбассадор-Действия",
            },
        ),
        migrations.AddField(
            model_name="ambassador",
            name="activities",
            field=models.ManyToManyField(
                related_name="ambassadors",
                through="ambassadors.AmbassadorActivity",
                to="ambassadors.activity",
                verbose_name="Амбассадорские действия",
            ),
        ),
    ]
